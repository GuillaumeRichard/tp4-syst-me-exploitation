#!/usr/bin/python3
# -*- coding: utf-8 -*-

from protocole import Protocole
import json


class ProtocoleJson(Protocole):
    """Interface du langage de communication JSON"""

    def __init__(self, server_root):
        super(Protocole, self).__init__()
        self.server_root = server_root
    pass

    def add_row_to_json_table(self, key, value, data):
        data[key] = value

    def json_table_to_json_text(self, data):
        json_data = json.dumps(data)
        return json_data

    def interpret(self, json_data, key):
        data = json.loads(json_data)
        return data[key]

    def interpret(self, json_data, parent_tag, child_tag=''):
        data = json.loads(json_data)

        if child_tag:
            return self.interpret_complex_json(data, parent_tag, child_tag)
        else:
            return self.interpret_simple_json(data, parent_tag)

    def interpret_simple_json(self, data, tag_name):
        return data[tag_name]

    def interpret_complex_json(self, data, parent_tag, child_tag):
        returned_data = []

        if 'contenu' not in data:
            returned_data.append(data[parent_tag][child_tag])
        else:
            for node in data[parent_tag][child_tag]:
                returned_data.append(node)

        return returned_data

    def get_connexion(self):
        data = {}
        self.add_row_to_json_table("salutation", "bonjourServeur", data)
        return self.json_table_to_json_text(data)

    def get_server_name(self):
        data = {}
        self.add_row_to_json_table("action", "questionNomServeur", data)
        return self.json_table_to_json_text(data)

    def verify_folder_exists(self, folder_name):
        data = {}
        self.add_row_to_json_table("questionListeDossiers", folder_name, data)
        return self.json_table_to_json_text(data)

    def create_folder(self, folder_name):
        data = {}
        self.add_row_to_json_table("creerDossier", folder_name, data)
        return self.json_table_to_json_text(data)

    def get_folder_list(self, folder_name):
        data = {}
        self.add_row_to_json_table("questionListeDossiers", folder_name, data)
        return self.json_table_to_json_text(data)

    def get_file_list(self, file_name):
        data = {}
        self.add_row_to_json_table("questionListeFichiers", file_name, data)
        return self.json_table_to_json_text(data)

    def delete_folder(self, folder_name):
        data = {}
        self.add_row_to_json_table("supprimerDossier", folder_name, data)
        return self.json_table_to_json_text(data)

    def delete_file(self, file_name, folder_name):
        data = {}
        search_data = {}
        self.add_row_to_json_table("dossier", folder_name, search_data)
        self.add_row_to_json_table("nom", file_name, search_data)

        self.add_row_to_json_table("supprimerFichier", search_data, data)
        return self.json_table_to_json_text(data)

    def download_file(self, file_name, folder):
        data = {}
        search_data = {}
        self.add_row_to_json_table("nom", file_name, search_data)
        self.add_row_to_json_table("dossier", folder, search_data)

        self.add_row_to_json_table("telechargerFichier", search_data, data)
        return self.json_table_to_json_text(data)

    def upload_file(self, file_name, folder_name, signature, file_content, date):
        data = {}
        search_data = {}

        self.add_row_to_json_table("nom", file_name, search_data)
        self.add_row_to_json_table("dossier", folder_name, search_data)
        self.add_row_to_json_table("signature", signature, search_data)
        self.add_row_to_json_table("contenu", file_content, search_data)
        self.add_row_to_json_table("date", date, search_data)

        self.add_row_to_json_table("televerserFichier", search_data, data)

        return self.json_table_to_json_text(data)

    def verify_file_is_more_recent(self, file_name, folder_name, date):
        data = {}
        search_data = {}

        self.add_row_to_json_table("nom", file_name, search_data)
        self.add_row_to_json_table("dossier", folder_name, search_data)
        self.add_row_to_json_table("date", date, search_data)

        self.add_row_to_json_table("questionFichierRecent", search_data, data)

        return self.json_table_to_json_text(data)

    def verify_file_is_identical(self, file_name, folder_name, signature, date):
        data = {}
        search_data = {}

        self.add_row_to_json_table("nom", file_name, search_data)
        self.add_row_to_json_table("dossier", folder_name, search_data)
        self.add_row_to_json_table("signature", signature, search_data)
        self.add_row_to_json_table("date", date, search_data)

        self.add_row_to_json_table("questionFichierIdentique", search_data, data)

        return self.json_table_to_json_text(data)

    def quit(self):
        data = {}
        key = "action"
        value = "quitter"
        self.add_row_to_json_table(key, value, data)
        return self.json_table_to_json_text(data)

    def get_server_folder_name(self, folder_name):
        return self.server_root + folder_name