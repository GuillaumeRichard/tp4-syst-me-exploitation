from messages import Messages
import re


class Client:
    """
    Classe représentant le client
    """

    def __init__(self, connexion, protocole):
        self.quit_has_been_called = False

        self.connexion = connexion
        self.protocole = protocole
        self.print_welcome_message()
        self.listen_for_input()

    def print_welcome_message(self):
        print(Messages.WELCOME_MESSAGE)

    def listen_for_input(self):
        while True:
            client_input = self.get_client_input()
            self.interpret_input(client_input)

            if self.quit_has_been_called:
                break

    def get_client_input(self):
        return input(Messages.ENTER_COMMAND)

    def interpret_input(self, client_input):
        if client_input == "connecter?":
            self.greeting()
        elif client_input == "nomServeur?":
            self.get_server_name()
        elif "listeDossier?" in client_input:
            self.get_folder_list(client_input)
        elif "dossier?" in client_input:
            self.verify_folder_exists(client_input)
        elif "creerDossier?" in client_input:
            self.create_folder(client_input)
        elif "supprimerDossier?" in client_input:
            self.delete_folder(client_input)
        elif "supprimerFichier?" in client_input:
            self.delete_file(client_input)
        elif client_input == "quitter":
            self.quit()
        else:
            self.print_answer(Messages.BAD_COMMAND)

    def greeting(self):
        message_to_send = self.protocole.get_connexion()
        server_answer = self.get_server_answer(message_to_send)
        if "bonjourClient" in server_answer:
            self.print_answer("Oui")
        else:
            self.print_answer("Non")

    def get_server_name(self):
        tag_name = "nomServeur"

        message_to_send = self.protocole.get_server_name()
        server_answer = self.get_server_answer(message_to_send)
        interpreted_answer = self.protocole.interpret(server_answer, tag_name)
        self.print_answer(interpreted_answer)

    def get_folder_list(self, client_input):
        parent_tag_name = "listeDossiers"
        child_tag_name = "dossier"

        input_args = client_input.split()
        folder_name = input_args[1]
        message_to_send = self.protocole.get_folder_list(folder_name)
        server_answer = self.get_server_answer(message_to_send)
        interpreted_answer = self.protocole.interpret(server_answer, parent_tag_name, child_tag_name)
        self.print_answer(interpreted_answer)

    def verify_folder_exists(self, client_input):
        input_args = client_input.split()
        folder_name = input_args[1]
        message_to_send = self.protocole.get_folder_list(folder_name)
        server_answer = self.get_server_answer(message_to_send)
        # si la réponse du serveur ne signifie aucune erreur
        if "listeDossiers" in server_answer:
            self.print_answer("Oui")
        else:
            self.print_answer(Messages.ERROR_COMMAND)

    def create_folder(self, client_input):
        # get_argument
        input_args = client_input.split()
        folder_name = input_args[1]
        ###
        message_to_send = self.protocole.create_folder(input_args[1])
        server_answer = self.get_server_answer(message_to_send)
        if "ok" in server_answer:
            self.print_answer("Oui")
        else:
            self.print_answer(Messages.ERROR_COMMAND)

    def delete_folder(self, client_input):
        # get_argument
        input_args = client_input.split()
        folder_name = input_args[1]
        ###
        message_to_send = self.protocole.delete_folder(folder_name)
        server_answer = self.get_server_answer(message_to_send)
        if "ok" in server_answer:
            self.print_answer("Ok")
        else:
            self.print_answer(Messages.DIRECTORY_NOT_FOUND)

    def delete_file(self, client_input):
        # get_argument
        input_args = client_input.split("/")
        file_name = input_args[-1]

        folder = re.sub(file_name, '', client_input)
        ###
        message_to_send = self.protocole.delete_file(file_name, folder)
        server_answer = self.get_server_answer(message_to_send)
        if "ok" in server_answer:
            self.print_answer("Ok")
        else:
            self.print_answer(Messages.FILE_NOT_FOUND)

    def quit(self):
        message_to_send = self.protocole.quit()
        server_answer = self.get_server_answer(message_to_send)
        if "bye" in server_answer:
            self.print_answer("Bye")
            self.connexion.close()
            self.quit_has_been_called = True
        else:
            self.print_answer(Messages.ERROR_COMMAND)

    def get_server_answer(self, message_to_send):
        self.connexion.send(message_to_send)
        return self.connexion.receive()

    def print_answer(self, answer):
        print(answer)
