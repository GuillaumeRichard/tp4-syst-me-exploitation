#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from ascii_encoder import AsciiEncoder
from signature_generator import SignatureGenerator
from pathlib import Path
import os, shutil, re


class FileSystem:
    """
    Cette classe fait l'interface avec le système de fichiers
    """

    def __init__(self, root):
        self.root = root

    def folder_exists(self, directory):
        complete_directory = self.root + directory
        return os.path.exists(complete_directory)

    def file_exists(self, file):
        complete_file_path = self.root + file
        path = Path(complete_file_path)
        if path.is_file():
            return True
        else:
            return False

    def liste_dossiers(self, directory):
        complete_directory = self.get_complete_path(directory)
        return os.walk(complete_directory)

    def liste_fichiers(self, directory):
        complete_directory = self.get_complete_path(directory)
        return filter(complete_directory.isfile, os.listdir(complete_directory))

    def create_folder(self, directory):
        complete_directory = self.get_complete_path(directory)
        os.mkdir(complete_directory)

    def create_file(self, directory, content):
        complete_directory = self.get_complete_path(directory)
        file = open(complete_directory, "w+")
        file.write(content)

    def get_md5_signature(self, file_name):
        content = self.get_file_content(file_name)
        signature = SignatureGenerator.generate_signature(content)

        return signature

    def get_file_content(self, file_name):
        complete_file_name = self.get_complete_path(file_name)
        content = open(complete_file_name).read()

        return content

    def get_encoded_content(self, file_name):
        content = self.get_file_content(file_name)
        encoded_content = AsciiEncoder.encode_in_ascii(content)
        return encoded_content

    def get_file_modification_date(self, file_name):
        complete_file_name = self.get_complete_path(file_name)
        file_stat = os.stat(complete_file_name)
        modification_date = str(file_stat.st_mtime)

        return modification_date

    def get_file_list(self, folder_name):
        complete_file_name = self.get_complete_path(folder_name)
        file_list = []
        for root, directories, filenames in os.walk(complete_file_name):
            for filename in filenames:
                path = os.path.join(root, filename)
                path = path.replace(self.root, '')  # On enlève la racine commune 'dropbox\'
                file_list.append(path)

        return file_list


    def clean_local_dropBox(self):
        shutil.rmtree(self.root)

    def write_in_file(self, path, content):
        print(self.root)
        filename = path.split('/')[-1]
        completePath = self.root + re.sub(filename, '', path)

        if self.folder_exists(path):
            directory = os.path.join(completePath, filename)
            f = open(directory, 'w+')
            f.write(content)
        else:
            os.makedirs(completePath)
            directory = os.path.join(completePath, filename)
            f = open(directory, 'w+')
            f.write(content)

    def folder_is_empty(self, directory):
        complete_dir = self.root + directory
        for dirpath, dirnames, files in os.walk(complete_dir):
            if files:
                return False
        return True

    def get_complete_path(self, path):
        return self.root + path
