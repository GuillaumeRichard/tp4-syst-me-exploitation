#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import unittest
from unittest.mock import Mock
from protocole_xml import ProtocoleXml
from client import Client
from prompt import Prompt
from messages import Messages
from mock_print_answer import MockPrintAnswer


class XmlTest(unittest.TestCase):

    mock_connexion = Mock()
    mock_file_system = Mock()
    mock_input = Mock()
    protocol = ProtocoleXml()
    client = Client(mock_connexion, protocol, mock_file_system)

    def testServerConnection_ServerIsConnected_ReturnYes(self):
        self.mock_input.side_effect = ["connecter?", "quitter"]
        self.mock_connexion.receive.side_effect = ["<bonjourClient />", "<bye />"]
        prompt = Prompt(self.client)
        prompt.input_command = self.mock_input
        mock_print = MockPrintAnswer()
        prompt.print_answer = mock_print.print_answer

        prompt.start()

        expected_answer = Messages.YES
        self.assertTrue(expected_answer in mock_print.printed_answers)

    def testGetServerName_ReturnServerName(self):
        self.mock_input.side_effect = ["nomServeur?", "quitter"]
        server_name = "Ubuntu Dropbox 2.0"
        self.mock_connexion.receive.side_effect = ["<nomServeur>" + server_name + "</nomServeur>", "<bye />"]
        prompt = Prompt(self.client)
        prompt.input_command = self.mock_input
        mock_print = MockPrintAnswer()
        prompt.print_answer = mock_print.print_answer

        prompt.start()

        expected_answer = server_name
        self.assertTrue(expected_answer in mock_print.printed_answers)

    def testGetFolderList_NoErrors_ReturnFolderList(self):
        self.mock_input.side_effect = ["listeDossier? d1", "quitter"]
        server_answer = "<listeDossiers>" \
                        "<dossier>d1/d2</dossier>" \
                        "<dossier>d1/d3</dossier>" \
                        "<dossier>d1/d4</dossier>" \
                        "</listeDossiers>"
        self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
        prompt = Prompt(self.client)
        prompt.input_command = self.mock_input
        mock_print = MockPrintAnswer()
        prompt.print_answer = mock_print.print_answer

        prompt.start()

        expected_answers = ["d1/d2", "d1/d3", "d1/d4"]
        for answer in expected_answers:
            self.assertTrue(answer in mock_print.printed_answers)

    # def testGetFolderList_InexistantFolder_ReturnInexistantFolder(self):
    #     self.mock_input.side_effect = ["listeDossier? d1", "quitter"]
    #     server_answer = "<erreurDossierInexistant />"
    #     self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
    #     prompt = Prompt(self.client)
    #     prompt.input_command = self.mock_input
    #     mock_print = MockPrintAnswer()
    #     prompt.print_answer = mock_print.print_answer
    #
    #     prompt.start()
    #
    #     expected_answer = Messages.FOLDER_NOT_FOUND
    #     self.assertTrue(expected_answer in mock_print.printed_answers)

#     testGetFolderList_CouldNotReadFolder

    def testFolderExists_FolderExists_ReturnYes(self):
        self.mock_input.side_effect = ["dossier? d1", "quitter"]
        server_answer = "<listeDossiers/>"
        self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
        prompt = Prompt(self.client)
        prompt.input_command = self.mock_input
        mock_print = MockPrintAnswer()
        prompt.print_answer = mock_print.print_answer

        prompt.start()

        expected_answer = Messages.YES
        self.assertTrue(expected_answer in mock_print.printed_answers)

    def testFolderExists_FolderDoesntExist_ReturnNo(self):
        self.mock_input.side_effect = ["dossier? d1", "quitter"]
        server_answer = "<erreurDossierInexistant/>"
        self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
        prompt = Prompt(self.client)
        prompt.input_command = self.mock_input
        mock_print = MockPrintAnswer()
        prompt.print_answer = mock_print.print_answer

        prompt.start()

        expected_answer = Messages.NO
        self.assertTrue(expected_answer in mock_print.printed_answers)

    def testCreateFolder_NoErrors_ReturnYes(self):
        self.mock_input.side_effect = ["creerDossier? d1", "quitter"]
        server_answer = "<ok />"
        self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
        prompt = Prompt(self.client)
        prompt.input_command = self.mock_input
        mock_print = MockPrintAnswer()
        prompt.print_answer = mock_print.print_answer

        prompt.start()

        expected_answer = Messages.YES
        self.assertTrue(expected_answer in mock_print.printed_answers)

    def testCreateFolder_FolderAlreadyExists_ReturnFolderAlreadyExists(self):
        self.mock_input.side_effect = ["creerDossier? d1", "quitter"]
        server_answer = "<erreurDossierExiste />"
        self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
        prompt = Prompt(self.client)
        prompt.input_command = self.mock_input
        mock_print = MockPrintAnswer()
        prompt.print_answer = mock_print.print_answer

        prompt.start()

        expected_answer = Messages.FOLDER_EXISTS
        self.assertTrue(expected_answer in mock_print.printed_answers)

    def testCreateFolder_FolderNotFound_ReturnFolderNotFound(self):
        self.mock_input.side_effect = ["creerDossier? d1", "quitter"]
        server_answer = "<erreurDossierInexistant />"
        self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
        prompt = Prompt(self.client)
        prompt.input_command = self.mock_input
        mock_print = MockPrintAnswer()
        prompt.print_answer = mock_print.print_answer

        prompt.start()

        expected_answer = Messages.FOLDER_NOT_FOUND
        self.assertTrue(expected_answer in mock_print.printed_answers)

    # def testUpload_NoErrors_ReturnOk(self):
    #     self.mock_input.side_effect = ["televerser? d1/fichier1", "quitter"]
    #     server_answer = "<ok />"
    #     self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
    #     prompt = Prompt(self.client)
    #     prompt.input_command = self.mock_input
    #     mock_print = MockPrintAnswer()
    #     prompt.print_answer = mock_print.print_answer
    #
    #     prompt.start()
    #
    #     expected_answer = Messages.OK
    #     self.assertTrue(expected_answer in mock_print.printed_answers)

    def testDeleteFolder_NoErrors_ReturnOk(self):
        self.mock_input.side_effect = ["supprimerDossier? d1", "quitter"]
        server_answer = "<ok />"
        self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
        prompt = Prompt(self.client)
        prompt.input_command = self.mock_input
        mock_print = MockPrintAnswer()
        prompt.print_answer = mock_print.print_answer

        prompt.start()

        expected_answer = Messages.OK
        self.assertTrue(expected_answer in mock_print.printed_answers)

    def testDeleteFolder_FolderDoesntExist_ReturnFolderDoesntExist(self):
        self.mock_input.side_effect = ["supprimerDossier? d1", "quitter"]
        server_answer = "<erreurDossierInexistant />"
        self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
        prompt = Prompt(self.client)
        prompt.input_command = self.mock_input
        mock_print = MockPrintAnswer()
        prompt.print_answer = mock_print.print_answer

        prompt.start()

        expected_answer = Messages.FOLDER_NOT_FOUND
        self.assertTrue(expected_answer in mock_print.printed_answers)

    def testDeleteFile_NoErrors_ReturnOk(self):
        self.mock_input.side_effect = ["supprimerFichier? d1/fichier1", "quitter"]
        server_answer = "<ok />"
        self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
        prompt = Prompt(self.client)
        prompt.input_command = self.mock_input
        mock_print = MockPrintAnswer()
        prompt.print_answer = mock_print.print_answer

        prompt.start()

        expected_answer = Messages.OK
        self.assertTrue(expected_answer in mock_print.printed_answers)

    def testDeleteFile_FolderDoesntExist_ReturnFolderDoesntExist(self):
        self.mock_input.side_effect = ["supprimerFichier? d1", "quitter"]
        server_answer = "<erreurDossierInexistant />"
        self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
        prompt = Prompt(self.client)
        prompt.input_command = self.mock_input
        mock_print = MockPrintAnswer()
        prompt.print_answer = mock_print.print_answer

        prompt.start()

        expected_answer = Messages.FOLDER_NOT_FOUND
        self.assertTrue(expected_answer in mock_print.printed_answers)

    def testDeleteFile_FileDoesntExist_ReturnFileDoesntExist(self):
        self.mock_input.side_effect = ["supprimerFichier? d1", "quitter"]
        server_answer = "<erreurFichierInexistant />"
        self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
        prompt = Prompt(self.client)
        prompt.input_command = self.mock_input
        mock_print = MockPrintAnswer()
        prompt.print_answer = mock_print.print_answer

        prompt.start()

        expected_answer = Messages.FILE_NOT_FOUND
        self.assertTrue(expected_answer in mock_print.printed_answers)

    def testFileExists_FileExists_ReturnYes(self):
        self.mock_input.side_effect = ["fichier? d1", "quitter"]
        server_answer = "<listeFichiers/>"
        self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
        prompt = Prompt(self.client)
        prompt.input_command = self.mock_input
        mock_print = MockPrintAnswer()
        prompt.print_answer = mock_print.print_answer

        prompt.start()

        expected_answer = Messages.YES
        self.assertTrue(expected_answer in mock_print.printed_answers)

    # def testFolderExists_FolderDoesntExist_ReturnNo(self):
    #     self.mock_input.side_effect = ["dossier? d1", "quitter"]
    #     server_answer = "<erreurDossierInexistant/>"
    #     self.mock_connexion.receive.side_effect = [server_answer, "<bye />"]
    #     prompt = Prompt(self.client)
    #     prompt.input_command = self.mock_input
    #     mock_print = MockPrintAnswer()
    #     prompt.print_answer = mock_print.print_answer
    #
    #     prompt.start()
    #
    #     expected_answer = Messages.NO
    #     self.assertTrue(expected_answer in mock_print.printed_answers)


if __name__ == '__main__':
    unittest.main()
